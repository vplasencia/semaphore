"use strict";(self.webpackChunk_semaphore_docs=self.webpackChunk_semaphore_docs||[]).push([[547],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=a,u=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return n?r.createElement(u,i(i({ref:t},p),{},{components:n})):r.createElement(u,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5490:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},l="Quick setup",c={unversionedId:"quick-setup",id:"version-V2/quick-setup",title:"Quick setup",description:"The following setup will allow you to create a simple Hardhat project with Semaphore (contract and tests). If you need a more complete demo try semaphore-boilerplate. It can be a good starting point to create your DApp.",source:"@site/versioned_docs/version-V2/quick-setup.md",sourceDirName:".",slug:"/quick-setup",permalink:"/docs/quick-setup",editUrl:"https://github.com/appliedzkp/semaphore/edit/main/versioned_docs/version-V2/quick-setup.md",tags:[],version:"V2",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"version-V2/mySidebar",previous:{title:"What Is Semaphore?",permalink:"/docs/introduction"},next:{title:"Groups",permalink:"/docs/guides/groups"}},p=[{value:"Create a Node.js project",id:"create-a-nodejs-project",children:[],level:2},{value:"Install Hardhat and the Semaphore packages",id:"install-hardhat-and-the-semaphore-packages",children:[],level:2},{value:"Create your contract",id:"create-your-contract",children:[],level:2},{value:"Create some identity commitments",id:"create-some-identity-commitments",children:[],level:2},{value:"Create a Hardhat task to deploy your contract",id:"create-a-hardhat-task-to-deploy-your-contract",children:[],level:2},{value:"Create your tests",id:"create-your-tests",children:[],level:2},{value:"Deploy your contract in a local network",id:"deploy-your-contract-in-a-local-network",children:[],level:2}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-setup"},"Quick setup"),(0,o.kt)("p",null,"The following setup will allow you to create a simple Hardhat project with Semaphore (contract and tests). If you need a more complete demo try ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cedoor/semaphore-boilerplate/"},"semaphore-boilerplate"),". It can be a good starting point to create your DApp."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Visit the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cedoor/semaphore-quick-setup"},"semaphore-quick-setup")," repository to get a full view of the code used below."))),(0,o.kt)("h2",{id:"create-a-nodejs-project"},"Create a Node.js project"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Download and install ",(0,o.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"Node.js/NPM")," and ",(0,o.kt)("a",{parentName:"li",href:"https://yarnpkg.com/getting-started/install"},"Yarn"),"."),(0,o.kt)("li",{parentName:"ol"},"Create your project:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir semaphore-example\n$ cd semaphore-example\n$ yarn init\n")),(0,o.kt)("h2",{id:"install-hardhat-and-the-semaphore-packages"},"Install Hardhat and the Semaphore packages"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install ",(0,o.kt)("a",{parentName:"li",href:"https://hardhat.org/getting-started/"},"Hardhat")," and create a basic sample project:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add hardhat --dev\n$ yarn hardhat # Create a basic sample project and confirm the other requests.\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Feel free to create more complex sample projects if you are an advanced Hardhat user."))),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Install the ",(0,o.kt)("a",{parentName:"li",href:"technical-reference/contracts"},"Semaphore contracts")," and its ",(0,o.kt)("a",{parentName:"li",href:"technical-reference/zk-kit"},"ZK-kit libraries"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @appliedzkp/semaphore-contracts\n$ yarn add @zk-kit/identity @zk-kit/protocols --dev\n")),(0,o.kt)("h2",{id:"create-your-contract"},"Create your contract"),(0,o.kt)("p",null,"Rename ",(0,o.kt)("inlineCode",{parentName:"p"},"Greeter.sol")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Greeters.sol")," and insert the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="./semaphore-example/contracts/Greeters.sol"',title:'"./semaphore-example/contracts/Greeters.sol"'},'//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport "@appliedzkp/semaphore-contracts/interfaces/IVerifier.sol";\nimport "@appliedzkp/semaphore-contracts/base/SemaphoreCore.sol";\n\n/// @title Greeters contract.\n/// @dev The following code is just a example to show how Semaphore con be used.\ncontract Greeters is SemaphoreCore {\n  // A new greeting is published every time a user\'s proof is validated.\n  event NewGreeting(bytes32 greeting);\n\n  // Greeters are identified by a Merkle root.\n  // The offchain Merkle tree contains the greeters\' identity commitments.\n  uint256 public greeters;\n\n  // The external verifier used to verify Semaphore proofs.\n  IVerifier public verifier;\n\n  constructor(uint256 _greeters, address _verifier) {\n    greeters = _greeters;\n    verifier = IVerifier(_verifier);\n  }\n\n  // Only users who create valid proofs can greet.\n  // The external nullifier is in this example the root of the Merkle tree.\n  function greet(\n    bytes32 _greeting,\n    uint256 _nullifierHash,\n    uint256[8] calldata _proof\n  ) external {\n    require(\n      _isValidProof(_greeting, greeters, _nullifierHash, greeters, _proof, verifier),\n      "Greeters: the proof is not valid"\n    );\n\n    // Prevent double-greeting (nullifierHash = hash(root + identityNullifier)).\n    // Every user can greet once.\n    _saveNullifierHash(_nullifierHash);\n\n    emit NewGreeting(_greeting);\n  }\n}\n\n')),(0,o.kt)("h2",{id:"create-some-identity-commitments"},"Create some identity commitments"),(0,o.kt)("p",null,"Identity commitments are used as the leaves of the Merkle trees used in the protocol and represent the identity of the users. Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"static")," folder and add the following file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="./static/identityCommitments.json"',title:'"./static/identityCommitments.json"'},'[\n  "9426253249246138013650573474062059446203468399013007463704855436559640562175",\n  "6200634377081441056179822649025268043304989981899916286941956069781421654881",\n  "19706772421195815860043593475869058320994241404138740034486179990871964981523"\n]\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The previous identity commitments have been generated using ",(0,o.kt)("inlineCode",{parentName:"p"},"@zk-kit/identity")," (with a message strategy) and Metamask for signing the messages with the first 3 Ethereum accounts of the ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-network/reference/#accounts"},"Hardhat dev wallet"),"."))),(0,o.kt)("h2",{id:"create-a-hardhat-task-to-deploy-your-contract"},"Create a ",(0,o.kt)("a",{parentName:"h2",href:"https://hardhat.org/guides/create-task.html#creating-a-task"},"Hardhat task")," to deploy your contract"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install ",(0,o.kt)("inlineCode",{parentName:"li"},"@zk-kit/incremental-merkle-tree")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"circomlibjs@0.0.8")," to create offchain Merkle trees.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @zk-kit/incremental-merkle-tree circomlibjs@0.0.8 --dev\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Install ",(0,o.kt)("inlineCode",{parentName:"li"},"hardhat-dependency-compiler")," to deploy a local verifier.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add hardhat-dependency-compiler --dev\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"tasks")," folder and add the following file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="./tasks/deploy.js"',title:'"./tasks/deploy.js"'},'const { IncrementalMerkleTree } = require("@zk-kit/incremental-merkle-tree")\nconst { poseidon } = require("circomlibjs")\nconst identityCommitments = require("../static/identityCommitments.json")\nconst { task, types } = require("hardhat/config")\n\ntask("deploy", "Deploy a Greeters contract")\n  .addOptionalParam("logs", "Print the logs", true, types.boolean)\n  .setAction(async ({ logs }, { ethers }) => {\n    const VerifierContract = await ethers.getContractFactory("Verifier")\n    const verifier = await VerifierContract.deploy()\n\n    await verifier.deployed()\n\n    logs && console.log(`Verifier contract has been deployed to: ${verifier.address}`)\n\n    const GreetersContract = await ethers.getContractFactory("Greeters")\n\n    const tree = new IncrementalMerkleTree(poseidon, 20, BigInt(0), 2)\n\n    for (const identityCommitment of identityCommitments) {\n      tree.insert(identityCommitment)\n    }\n\n    const greeters = await GreetersContract.deploy(tree.root, verifier.address)\n\n    await greeters.deployed()\n\n    logs && console.log(`Greeters contract has been deployed to: ${greeters.address}`)\n\n    return greeters\n  })\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Set up your ",(0,o.kt)("inlineCode",{parentName:"li"},"hardhat.config.js")," file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="./hardhat.config.js"',title:'"./hardhat.config.js"'},'require("@nomiclabs/hardhat-waffle")\nrequire("hardhat-dependency-compiler")\nrequire("./tasks/deploy") // Your deploy task.\n\nmodule.exports = {\n  solidity: "0.8.4",\n  dependencyCompiler: {\n    // It allows Hardhat to compile the external Verifier.sol contract.\n    paths: ["@appliedzkp/semaphore-contracts/base/Verifier.sol"]\n  }\n}\n')),(0,o.kt)("h2",{id:"create-your-tests"},"Create your tests"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Creating proofs requires some static files, in the future these files will be hosted on a server and made public. For now you can use the ones used in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/appliedzkp/semaphore/tree/main/build/snark"},"our repository")," for testing. Copy these files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"static")," folder.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Update the Hardhat test file:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="./test/sample-test.js"',title:'"./test/sample-test.js"'},'const { Strategy, ZkIdentity } = require("@zk-kit/identity")\nconst { generateMerkleProof, Semaphore } = require("@zk-kit/protocols")\nconst identityCommitments = require("../static/identityCommitments.json")\nconst { expect } = require("chai")\nconst { run, ethers } = require("hardhat")\n\ndescribe("Greeters", function () {\n  let contract\n  let signers\n\n  before(async () => {\n    contract = await run("deploy", { logs: false })\n\n    signers = await ethers.getSigners()\n  })\n\n  describe("# greet", () => {\n    const wasmFilePath = "./static/semaphore.wasm"\n    const finalZkeyPath = "./static/semaphore_final.zkey"\n\n    it("Should greet", async () => {\n      const message = await signers[0].signMessage("Sign this message to create your identity!")\n\n      const identity = new ZkIdentity(Strategy.MESSAGE, message)\n      const identityCommitment = identity.genIdentityCommitment()\n      const greeting = "Hello world"\n      const bytes32Greeting = ethers.utils.formatBytes32String(greeting)\n\n      const merkleProof = generateMerkleProof(20, BigInt(0), 2, identityCommitments, identityCommitment)\n      const witness = Semaphore.genWitness(\n        identity.getTrapdoor(),\n        identity.getNullifier(),\n        merkleProof,\n        merkleProof.root,\n        greeting\n      )\n\n      const fullProof = await Semaphore.genProof(witness, wasmFilePath, finalZkeyPath)\n      const solidityProof = Semaphore.packToSolidityProof(fullProof.proof)\n\n      const nullifierHash = Semaphore.genNullifierHash(merkleProof.root, identity.getNullifier())\n\n      const transaction = contract.greet(bytes32Greeting, nullifierHash, solidityProof)\n\n      await expect(transaction).to.emit(contract, "NewGreeting").withArgs(bytes32Greeting)\n    })\n  })\n})\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Compile and test your contract:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn hardhat compile\n$ yarn hardhat test\n")),(0,o.kt)("h2",{id:"deploy-your-contract-in-a-local-network"},"Deploy your contract in a local network"),(0,o.kt)("p",null,"You can also deploy your contract in a local Hardhat network and use it in your DApp:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn hardhat node\n$ yarn hardhat deploy --network localhost # In another tab.\n")))}m.isMDXComponent=!0}}]);