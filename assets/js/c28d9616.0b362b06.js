"use strict";(self.webpackChunk_semaphore_docs=self.webpackChunk_semaphore_docs||[]).push([[495],{2300:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"V2","label":"V2","banner":null,"badge":true,"className":"docs-version-V2","isLast":true,"docsSidebars":{"version-V2/mySidebar":[{"type":"link","label":"What Is Semaphore?","href":"/docs/introduction","docId":"introduction"},{"type":"link","label":"Quick setup","href":"/docs/quick-setup","docId":"quick-setup"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Groups","href":"/docs/guides/groups","docId":"guides/groups"},{"type":"link","label":"Nullifiers","href":"/docs/guides/nullifiers","docId":"guides/nullifiers"},{"type":"link","label":"Signals","href":"/docs/guides/signals","docId":"guides/signals"}]},{"type":"category","label":"Technical Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Circuits","href":"/docs/technical-reference/circuits","docId":"technical-reference/circuits"},{"type":"link","label":"Contracts","href":"/docs/technical-reference/contracts","docId":"technical-reference/contracts"},{"type":"link","label":"ZK-kit libraries","href":"/docs/technical-reference/zk-kit","docId":"technical-reference/zk-kit"}]},{"type":"link","label":"Resources","href":"/docs/resources","docId":"resources"},{"type":"link","label":"Credits","href":"/docs/credits","docId":"credits"}]},"docs":{"credits":{"id":"credits","title":"Credits","description":"- Barry WhiteHat","sidebar":"version-V2/mySidebar"},"guides/groups":{"id":"guides/groups","title":"Groups","description":"Describe how to use Semaphore groups:","sidebar":"version-V2/mySidebar"},"guides/nullifiers":{"id":"guides/nullifiers","title":"Nullifiers","description":"Describe how to use external nullifiers and how to avoid double signaling.","sidebar":"version-V2/mySidebar"},"guides/signals":{"id":"guides/signals","title":"Signals","description":"Describe how to verify proofs and signal arbitrary strings.","sidebar":"version-V2/mySidebar"},"introduction":{"id":"introduction","title":"What Is Semaphore?","description":"Semaphore\'s V2 documentation is under development.","sidebar":"version-V2/mySidebar"},"quick-setup":{"id":"quick-setup","title":"Quick setup","description":"The following setup will allow you to create a simple Hardhat project with Semaphore (contract and tests). If you need a more complete demo try semaphore-boilerplate. It can be a good starting point to create your DApp.","sidebar":"version-V2/mySidebar"},"resources":{"id":"resources","title":"Resources","description":"To Mixers and Beyond: presenting Semaphore, a privacy gadget built on Ethereum - Koh Wei Jie","sidebar":"version-V2/mySidebar"},"technical-reference/circuits":{"id":"technical-reference/circuits","title":"Circuits","description":"Semaphore circuits are the heart of the protocol and essentially allow you to prove:","sidebar":"version-V2/mySidebar"},"technical-reference/contracts":{"id":"technical-reference/contracts","title":"Contracts","description":"When using Semaphore contracts keep in mind that there are two types of contracts:","sidebar":"version-V2/mySidebar"},"technical-reference/zk-kit":{"id":"technical-reference/zk-kit","title":"ZK-kit libraries","description":"When using Semaphore each user will need to create their own identity, which will then be added to a group. @zk-kit/identity allows users to create and manage their identities, while @zk-kit/protocols allows users to create Semaphore proofs to prove their group membership and signal their endorsement of an arbitrary string anonymously.","sidebar":"version-V2/mySidebar"}}}')}}]);